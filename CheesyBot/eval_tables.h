#pragma once

enum class PIECE_NAME{
    PAWN, BISHOP, KNIGHT, KING, ROOK, QUEEN
};
enum class PIECE_COLOR{
    BLACK, WHITE
};

struct EVAL_TABLES{
    static constexpr int KING[64] = {-30, -40, -40, -50, -50, -40, -40, -30,
                                 -30, -40, -40, -50, -50, -40, -40, -30,
                                 -30, -40, -40, -50, -50, -40, -40, -30,
                                 -30, -40, -40, -50, -50, -40, -40, -30,
                                 -20, -30, -30, -40, -40, -30, -30, -20,
                                 -10, -20, -20, -20, -20, -20, -20, -10, 
                                  20,  20,   0,   0,   0,   0,  20,  20,
                                  20,  30,  10,   0,   0,  10,  30,  20};

    static constexpr int BISHOP[64] = {-20,-10,-10,-10,-10,-10,-10,-20,
                                   -10,  0,  0,  0,  0,  0,  0,-10,
                                   -10,  0,  5, 10, 10,  5,  0,-10,
                                   -10,  5,  5, 10, 10,  5,  5,-10,
                                   -10,  0, 10, 10, 10, 10,  0,-10,
                                   -10, 10, 10, 10, 10, 10, 10,-10,
                                   -10,  5,  0,  0,  0,  0,  5,-10,
                                   -20,-10,-40,-10,-10,-40,-10,-20};
    
    static constexpr int KNIGHT[64] = {-50,-40,-30,-30,-30,-30,-40,-50,
                                   -40,-20,  0,  0,  0,  0,-20,-40,
                                   -30,  0, 10, 15, 15, 10,  0,-30,
                                   -30,  5, 15, 20, 20, 15,  5,-30,
                                   -30,  0, 15, 20, 20, 15,  0,-30,
                                   -30,  5, 10, 15, 15, 10,  5,-30,
                                   -40,-20,  0,  5,  5,  0,-20,-40,
                                   -50,-40,-20,-30,-30,-20,-40,-50};
    
    static constexpr int PAWN[64] = {0,  0,  0,  0,  0,  0,  0,  0,
                                 50, 50, 50, 50, 50, 50, 50, 50,
                                 10, 10, 20, 30, 30, 20, 10, 10,
                                 5,  5, 10, 27, 27, 10,  5,  5,
                                 0,  0,  0, 25, 25,  0,  0,  0,
                                 5, -5,-10,  0,  0,-10, -5,  5,
                                 5, 10, 10,-25,-25, 10, 10,  5,
                                 0,  0,  0,  0,  0,  0,  0,  0};

    static constexpr int QUEEN[64] = {-40, -20, -20, -10, -10, -20, -20, -40 ,
                                  -20,   0,   0,   0,   0,   0,   0, -20 ,
                                  -20,   0,  10,  10,  10,  10,   0, -20 ,
                                  -10,   0,  10,  10,  10,  10,   0, -10 ,
                                    0,   0,  10,  10,  10,  10,   0, -10 ,
                                  -20,  10,  10,  10,  10,  10,   0, -20 ,
                                  -20,   0,  10,   0,   0,   0,   0, -20 ,
                                  -40, -20, -20, -10, -10, -20, -20, -40 };

    static constexpr int ROOK[64] = {0,  0,  0,  0,  0,  0,  0,   0 ,
                                 10, 20, 20, 20, 20, 20, 20,  10 ,
                                -10,  0,  0,  0,  0,  0,  0, -10 ,
                                -10,  0,  0,  0,  0,  0,  0, -10 ,
                                -10,  0,  0,  0,  0,  0,  0, -10 ,
                                -10,  0,  0,  0,  0,  0,  0, -10 , 
                                -10,  0,  0,  0,  0,  0,  0, -10 ,
                                -30, 30, 40, 10, 10,  0,  0, -30 };
    
    static int getVal(PIECE_NAME pn, PIECE_COLOR col, int x, int y){
        if(col == PIECE_COLOR::BLACK){
            y = 8 - y;
        }

        int index = y * 8 + x;

        switch(pn){
            case PIECE_NAME::ROOK:
                return ROOK[index];
            case PIECE_NAME::KING:
                return KING[index];
            case PIECE_NAME::BISHOP:
                return BISHOP[index];
            case PIECE_NAME::KNIGHT:
                return KNIGHT[index];
            case PIECE_NAME::QUEEN:
                return QUEEN[index];
        }
        return PAWN[index];
    }
};